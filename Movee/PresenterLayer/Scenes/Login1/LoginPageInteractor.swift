//
//  LoginPageInteractor.swift
//  Movee
//
//  Created by Oguz Tandogan on 6.12.2020.
//  Copyright (c) 2020 Oguz Tandogan. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import MoveeWebService

final class LoginPageInteractor: AssemblerWireframeInteractorProtocol {
    
    private var usecase: LoginUsecase?
}

// MARK: - Extensions -

extension LoginPageInteractor: LoginPageInteractorInterface {
    
//    func authenticateWithUserCredentials(username: String?, password: String?) {
//        TmDBService.instance.getToken(completion: { response in
//            let loginRequestModel = LoginRequestModel(username: response.request_token,
//                                                      password: password,
//                                                      request_token: username)
//            TmDBService.instance.createSessionWithLogin(requestModel: loginRequestModel, completion: { requestToken, response1  in
//                guard let isSuccess = response1?.success else {
//                    fatalError("error")
//                }
//                if isSuccess {
//                    TmDBService.instance.createSessionID(requestModel: response1?.request_token, completion: { savedToken, sessionId in
//                        guard let isSuccess = response1?.success else {
//                            fatalError("error")
//                        }
//                        if isSuccess {
//                            TmDBService.instance.getAccountDetails(requestModel: sessionId.session_id, completion: { accountDetails in
//                                DispatchQueue.main.async {
//                                    if let accountId = accountDetails.id {
//                                        let accountIdString = String(accountId)
//                                        UserDefaults.standard.set(accountIdString, forKey: "AccountId")
//                                        UserDefaults.standard.set(true, forKey: "IsLoggedIn")
//                                    }
//                                }
//                            })
//                        } else {
//                            fatalError("error")
//                        }
//                    })
//
//                } else {
//                    fatalError("error")
//                }
//
//            })
//        })
//
//    }
    
    func getAuthenticatedSessionId(callback: LoginCallback, params: LoginRequestModel) {
        usecase = returnResolver().resolve(LoginUsecase.self)
        usecase?.execute(useCaseCallBack: callback, params: params)
    }
    
}
