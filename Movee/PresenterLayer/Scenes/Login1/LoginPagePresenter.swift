//
//  LoginPagePresenter.swift
//  Movee
//
//  Created by Oguz Tandogan on 6.12.2020.
//  Copyright (c) 2020 Oguz Tandogan. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import MoveeComponents
import Utilities
import MoveeWebService
import SwiftKeychainWrapper

final class LoginPagePresenter {

    // MARK: - Private properties -

    private unowned let view: LoginPageViewInterface
    private let formatter: LoginPageFormatterInterface
    private let interactor: LoginPageInteractorInterface
    private let wireframe: LoginPageWireframeInterface

    private let loginCallback = LoginCallback()
    // MARK: - Lifecycle -

    init(view: LoginPageViewInterface, formatter: LoginPageFormatterInterface, interactor: LoginPageInteractorInterface, wireframe: LoginPageWireframeInterface) {
        self.view = view
        self.formatter = formatter
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension LoginPagePresenter: LoginPagePresenterInterface {
    
    func viewDidLoad() {
    }
    
    func loadLoginData(username: String?, password: String?) {
//        interactor.authenticateWithUserCredentials(username: username, password: password)
    }
    func getLoginSessionId(username: String?, password: String?) {
        loginCallback.commonResult { [weak self] (result) in
            self?.handleLoginResponse(result: result)
        }
        interactor.getSessionId(callback: loginCallback, params: LoginRequestModel(username: username, password: password, requestToken: KeychainWrapper.standard.string(forKey: "BasicToken")))
    }
//    KeychainWrapper.standard.set(success.requestToken ?? "", forKey: "BasicToken")

    func handleLoginResponse(result: Result<SessionResponseModel, BaseErrorResponse>) {
        switch result {
        case .failure(let error):
            print(error)
        case .success(let success):
            print(success)
            wireframe.navigate(to: .mainPage)
        }
    }
}
