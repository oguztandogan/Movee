//
//  MoviesViewController.swift
//  Movee
//
//  Created by Oguz Tandogan on 31.10.2019.
//  Copyright Â© 2019 Oguz Tandogan. All rights reserved.
//
import Foundation
import UIKit

class MoviesViewController: BaseViewController {
    
<<<<<<< Updated upstream
=======
    @IBOutlet weak var popularTableView: UITableView!
    @IBOutlet weak var nowPlayingCollectionView: UICollectionView!
    @IBOutlet weak var ratingLabel: UILabel!
    @IBOutlet weak var movieNameLabel: UILabel!
    @IBOutlet weak var genreLabel: UILabel!
    @IBOutlet weak var ratingLabelView: UIView!
    @IBOutlet weak var moviesView: UIView!
    
>>>>>>> Stashed changes
    enum Constants {
        static let ratingLabelRadius = 10
        static let collectionCellWidth = 400
        static let collectionCellHeight = 500
        static let movieArtworkUrl = "https://image.tmdb.org/t/p/w500"
        static let heightForRowAt = 120
        static let tableViewCellId = "PopularMoviesCell"
        static let collectionViewCellId = "MainMoviesImageCell"
        static let tableViewSections = 1
        static let seriesTabBar = "seriesTabBar"
        static let moviesTabBar = "moviesTabBar"
        static let popularMoviesToDetailPageSegueId = "PopularMoviesToDetailsPageSegue"
        static let nowPlayingMoviesToDetailPageSegueId = "NowPlayingMoviesToDetailsPageSegue"
    }
    
    @IBOutlet weak var popularTableView: UITableView!
    @IBOutlet weak var nowPlayingCollectionView: UICollectionView!
    @IBOutlet weak var ratingLabel: UILabel!
    @IBOutlet weak var movieNameLabel: UILabel!
    @IBOutlet weak var genreLabel: UILabel!
    @IBOutlet weak var ratingLabelView: UIView!
    
    let layout = UICollectionViewFlowLayout()
    var popularMovies = [MovieUIModel]()
    var nowPlayingMovies = [MovieUIModel]()
    var moviePopularList = [MovieServiceModel]()
    var nowPlayingList = [MovieServiceModel]()
    var detailPopular = [MovieDetailsModel]()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.ratingLabelView.layer.cornerRadius = CGFloat(Constants.ratingLabelRadius)
        StatusBarUtil.instance.StatusBarBackgroundColor(endpoint: moviesView, color: UIColor.vibrantBlue)
        getPopularMoviesList()
        getNowPlayingMoviesList()
        navigationController?.navigationBar.backgroundColor = UIColor.vibrantBlue
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.tabBarController?.tabBar.isHidden = false
        self.navigationController?.setNavigationBarHidden(true, animated: animated)
    }
    
    func getPopularMoviesList() {
        TmDBService.instance.getPopularMovies(completion: { popularMovies in
            for movie in popularMovies {
                let movieUIModel = MovieUIModel(poster_path: movie.poster_path ?? "", id: movie.id, title: movie.title , vote_average: String(movie.vote_average), overview: movie.overview, release_date: movie.release_date, runtime: "", genres: "", backdrop_path: movie.backdrop_path ?? "")
                self.popularMovies.append(movieUIModel)
                
                TmDBService.instance.getMovieDetail(id: movieUIModel.id ?? 0) { movieDetail, movieGenres in
                    movieUIModel.runtime = String(movieDetail.runtime)
                    var genrePopular: String = ""
                    for (index, genre) in movieGenres.genres.enumerated() {
                        if movieGenres.genres.count-1 == index {
                            genrePopular += genre.name
                        } else {
                            genrePopular += genre.name + ", "
                        }
                    }
                    movieUIModel.genres = genrePopular
                }
                DispatchQueue.main.async {
                    self.popularTableView.reloadData()
                }
            }
        })
    }
    
    func getNowPlayingMoviesList(){
        TmDBService.instance.getNowPlayingMovies(completion: { nowPlayingMovies in
            for movie in nowPlayingMovies {
                let movieUIModel = MovieUIModel(poster_path: movie.poster_path ?? "", id: movie.id, title: movie.title, vote_average: String(movie.vote_average), overview: movie.overview, release_date: movie.release_date, runtime: "", genres: "", backdrop_path: movie.backdrop_path ?? "")
                self.nowPlayingMovies.append(movieUIModel)
                TmDBService.instance.getMovieDetail(id: movieUIModel.id ?? 0) { (DetailModel, MovieGenreModel) in
                    var genreNowPlaying: String = ""
                    for(index, genre) in MovieGenreModel.genres.enumerated(){
                        movieUIModel.runtime = String(DetailModel.runtime)
                        if MovieGenreModel.genres.count-1 == index {
                            genreNowPlaying += genre.name
                        } else{
                            genreNowPlaying += genre.name + ", "
                        }
                        movieUIModel.genres = genreNowPlaying
                    }
                    DispatchQueue.main.async {
                        self.nowPlayingCollectionView.reloadData()
                    }
                }
            }
        })
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if (segue.identifier == Constants.popularMoviesToDetailPageSegueId){
            if let destination = segue.destination as?
                MovieDetailsViewController, let index =
                popularTableView.indexPathsForSelectedRows?.first {
                destination.movieDetailsUIModel = popularMovies[index.row]
            }
        }
        else if (segue.identifier == Constants.nowPlayingMoviesToDetailPageSegueId) {
            if let destination = segue.destination as?
                MovieDetailsViewController, let index =
                nowPlayingCollectionView.indexPathsForSelectedItems?.first {
                destination.movieDetailsUIModel = nowPlayingMovies[index.row]
            }
        }
    }
}
